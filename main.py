import discord
from discord.ext import commands, tasks
from discord import app_commands
import asyncio
import os
import random
from datetime import datetime, timezone
from dotenv import load_dotenv
from settings import Settings
from tools import Tools
from data_cache import data_cache

load_dotenv()

class SquadBot(commands.Bot):
    def __init__(self):
        intents = discord.Intents.none()
        intents.guilds = True
        super().__init__(command_prefix='!', intents=intents)
        self.auto_update_message_id = None
        
    async def setup_hook(self):
        print("Setting up bot...")
        try:
            # –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ –∫–æ–º–∞–Ω–¥–∏
            print("Syncing commands...")
            synced = await self.tree.sync()
            print(f"Synced {len(synced)} slash commands")
            
            # –í–∏–≤–æ–¥–∏–º–æ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            for command in synced:
                print(f"  - {command.name}: {command.description}")
                
        except Exception as e:
            print(f"Failed to sync commands: {e}")
            import traceback
            traceback.print_exc()
        
        print("Setup hook completed")
        
    async def on_ready(self):
        print(f'ü¶ç {self.user} has connected to Discord!')
        print(f'ü¶ç Bot is in {len(self.guilds)} guilds')
        
        # –¢–∏–º—á–∞—Å–æ–≤–æ –≤—ñ–¥–∫–ª—é—á–∞—î–º–æ —Ñ–æ–Ω–æ–≤—ñ –∑–∞–¥–∞—á—ñ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
        print("ü¶ç Bot is ready, background tasks disabled for testing...")
        
        # –ú–æ–∂–Ω–∞ –≤—Ä—É—á–Ω—É –æ–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ –æ–¥–∏–Ω —Ä–∞–∑
        try:
            print("ü¶ç Doing initial data update...")
            asyncio.create_task(data_cache.update_data())
        except Exception as e:
            print(f"Error in initial data update: {e}")

bot = SquadBot()

def is_allowed_user():
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
    def predicate(interaction: discord.Interaction) -> bool:
        return interaction.user.id in Settings.ALLOWED_USER_IDS
    return app_commands.check(predicate)

def is_admin_user():
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∞–¥–º—ñ–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
    def predicate(interaction: discord.Interaction) -> bool:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤ —Å–ø–∏—Å–∫—É –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö —Ç–∞ —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å–µ—Ä–≤–µ—Ä–∞
        if interaction.user.id not in Settings.ALLOWED_USER_IDS:
            return False
        
        if not interaction.guild:
            return True  # –Ø–∫—â–æ –Ω–µ–º–∞—î –≥—ñ–ª—å–¥—ñ—ó, –¥–æ–∑–≤–æ–ª—è—î–º–æ
            
        member = interaction.guild.get_member(interaction.user.id)
        if not member:
            return True
            
        return (
            member.guild_permissions.administrator or
            member.guild_permissions.manage_guild or
            interaction.guild.owner_id == interaction.user.id
        )
    return app_commands.check(predicate)

@bot.tree.command(name="top", description="–¢–æ–ø 100 –æ–Ω–ª–∞–π–Ω –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å (–Ω—ñ–∫ + —á–∞—Å)")
@is_allowed_user()
async def top_command(interaction: discord.Interaction):
    await interaction.response.send_message("ü¶ç –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é –¥–∞–Ω—ñ –∑ –∫–µ—à—É, —Ç—Ä–∏–º–∞–π—Å—è —Ö–ª–æ–ø–µ—Ü—å...", ephemeral=False)
    
    try:
        players_list = data_cache.get_current_month_data(with_steam_id=False)
        
        if not players_list:
            status = data_cache.get_cache_status()
            await interaction.edit_original_response(content=f"ü¶ç –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –≤ –∫–µ—à—ñ, —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫.\n{status}")
            return
        
        embeds = create_leaderboard_embeds(players_list, is_admin=False, title_suffix="")
        
        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –æ–¥–∏–Ω embed
        await interaction.edit_original_response(content=None, embed=embeds[0])
            
    except Exception as e:
        print(f"Error in top command: {e}")
        await interaction.edit_original_response(content="ü¶ç –û–π, —â–æ—Å—å –∑–ª–∞–º–∞–ª–æ—Å—å –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!")

@bot.tree.command(name="topad", description="–¢–æ–ø 100 –æ–Ω–ª–∞–π–Ω –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å (Steam ID + –Ω—ñ–∫ + —á–∞—Å) - —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤")
@is_admin_user()
async def top_admin_command(interaction: discord.Interaction):
    await interaction.response.send_message("ü¶ç –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é —Å–µ–∫—Ä–µ—Ç–Ω—ñ –¥–∞–Ω—ñ –∑ –∫–µ—à—É, —Ü–µ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∫—Ä—É—Ç–∏—Ö...", ephemeral=True)
    
    try:
        players_list = data_cache.get_current_month_data(with_steam_id=True)
        
        if not players_list:
            status = data_cache.get_cache_status()
            await interaction.edit_original_response(content=f"ü¶ç –û—É, –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö –≤ –∫–µ—à—ñ, –º–∞–±—É—Ç—å —â–æ—Å—å –∑–ª–∞–º–∞–ª–æ—Å—å.\n{status}")
            return
        
        embeds = create_leaderboard_embeds(players_list, is_admin=True, title_suffix="")
        
        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –æ–¥–∏–Ω embed
        await interaction.edit_original_response(content=None, embed=embeds[0])
            
    except Exception as e:
        print(f"Error in topad command: {e}")
        await interaction.edit_original_response(content="ü¶ç –ô–æ–π, —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ –∑ –¥–∞–Ω–Ω–∏–º–∏. –ü–æ–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ!")

@bot.tree.command(name="toppr", description="–¢–æ–ø 100 –æ–Ω–ª–∞–π–Ω –∑–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –º—ñ—Å—è—Ü—å (Steam ID + –Ω—ñ–∫ + —á–∞—Å) - —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤")
@is_admin_user()
async def top_previous_month_command(interaction: discord.Interaction):
    await interaction.response.send_message("ü¶ç –®—É–∫–∞—é –¥–∞–Ω—ñ —Å—Ç–∞—Ä–æ–≥–æ –º—ñ—Å—è—Ü—è –≤ –∫–µ—à—ñ, —Ü–µ –∑–∞–π–º–µ —Ç—Ä–æ—à–∫–∏ —á–∞—Å—É...", ephemeral=True)
    
    try:
        players_list = data_cache.get_previous_month_data()
        
        if not players_list:
            status = data_cache.get_cache_status()
            await interaction.edit_original_response(content=f"ü¶ç –•–º, –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö –º–∏–Ω—É–ª–æ–≥–æ –º—ñ—Å—è—Ü—è –≤ –∫–µ—à—ñ, —â–æ—Å—å –Ω–µ –≥—Ä–∞—î.\n{status}")
            return
        
        embeds = create_leaderboard_embeds(players_list, is_admin=True, title_suffix=" (–ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –º—ñ—Å—è—Ü—å)")
        
        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –æ–¥–∏–Ω embed
        await interaction.edit_original_response(content=None, embed=embeds[0])
            
    except Exception as e:
        print(f"Error in toppr command: {e}")
        await interaction.edit_original_response(content="ü¶ç –ê—è—è–π, —â–æ—Å—å –Ω–µ —Ç–∞–∫ –∑ –¥–∞–Ω–Ω–∏–º–∏ –º–∏–Ω—É–ª–æ–≥–æ –º—ñ—Å—è—Ü—è. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ!")

@bot.tree.command(name="randomsquadname", description="–ì–µ–Ω–µ—Ä—É—î –≤–∏–ø–∞–¥–∫–æ–≤—É –Ω–∞–∑–≤—É –¥–ª—è Squad –∑–∞–≥–æ–Ω—É")
@is_allowed_user()
async def random_squad_name_command(interaction: discord.Interaction):
    # –°–ø–∏—Å–æ–∫ –ø—Ä–∏–∫–º–µ—Ç–Ω–∏–∫—ñ–≤ (50 —Å–ª—ñ–≤)
    adjectives = [
        "–ß–æ–≤–≥–∞—é—á—ñ", "–ß–æ—Ä–Ω—ñ", "–ö–æ—Ä–µ–Ω–∞—Å—Ç—ñ", "–°–æ–Ω–ª–∏–≤—ñ", "–ö—Ä–∏—Ö–∫—ñ", "–°–µ—Ä–µ–¥–Ω—ñ", "–ì—Ä–∞–π–ª–∏–≤—ñ",
        "–í–µ–ª–∏–∫—ñ", "–ë—ñ–ª—ñ", "–®–≤–∏–¥–∫—ñ", "–ü–æ–≤—ñ–ª—å–Ω—ñ", "–•–∏—Ç—Ä—ñ", "–ö–∞—á—å–æ–≤—ñ", "–ë–æ—è–∑–∫—ñ",
        "–°—Ç–∞—Ä—ñ", "–ú–æ–ª–æ–¥—ñ", "–î–æ—Å–≤—ñ–¥—á–µ–Ω—ñ", "–Ü–º–ø–µ—Ä–∞—Ç–æ—Ä—Å—å–∫—ñ", "–¢–∏—Ö—ñ", "–ì—É—á–Ω—ñ",
        "–¢–µ—Ä–ø–µ–ª–∏–≤—ñ", "–ù–µ—Ç–µ—Ä–ø–µ–ª–∏–≤—ñ", "–ì–∞–¥—è—á—Å—å–∫—ñ", "–î—É—Ä–Ω—ñ", "–í–µ—Å–µ–ª—ñ", "–°—É–º–Ω—ñ",
        "–ó–ª—ñ", "–ì–∞—á—ñ", "–•–æ–ª–æ–¥–Ω—ñ", "–ì–∞—Ä—è—á—ñ", "–ú–æ–∫—Ä—ñ", "–°—É—Ö—ñ",
        "–ì–æ–ª–æ–¥–Ω—ñ", "–°–∏—Ç—ñ", "–í—Ç–æ–º–ª–µ–Ω—ñ", "–ì–∞—á—ñ", "–°–ø–æ–∫—ñ–π–Ω—ñ", "–ù–µ—Ä–≤–æ–≤—ñ",
        "–°–µ–∫—Ä–µ—Ç–Ω—ñ", "–°–ª–∞—Å—Ç–∏–≤—ñ", "–¢–∞—î–º–Ω–∏—á—ñ", "–û—á–µ–≤–∏–¥–Ω—ñ", "–°–∫–ª–∞–¥–Ω—ñ", "–ü—Ä–æ—Å—Ç—ñ",
        "–û—Ä—É—â—ñ", "–î–æ–º–∞—à–Ω—ñ", "–í—ñ–ª—å–Ω—ñ", "–ó–∞–ø–ª—É—Ç–∞–Ω—ñ", "–†–∞–π–¥—É–∂–Ω—ñ", "–í–∏–ø–∞–¥–∫–æ–≤—ñ", "–£–∫—Ä–∞—ó–Ω—Å—å–∫—ñ", "–í–º–æ—Ç–∏–≤–æ–≤–∞–Ω—ñ", "–ó–∞–∑–µ–º–ª–µ–Ω—ñ", "–ù–µ–∫—É—Ä—è—â—ñ", "–°–æ–º–∞–ª—ñ–π—Å—å–∫—ñ"
    ]
    
    # –°–ø–∏—Å–æ–∫ —ñ–º–µ–Ω–Ω–∏–∫—ñ–≤ —É –º–Ω–æ–∂–∏–Ω—ñ (50 —Å–ª—ñ–≤)
    nouns = [
        "–¥–µ—Å–∞–Ω—Ç–Ω–∏–∫–∏", "–∫–∞—Ä–ª–∏–∫–∏", "–∞–ª–∫–æ–Ω–∞–≤—Ç–∏", "–∫–æ—Å–º–æ–¥–µ—Å–∞–Ω—Ç–Ω–∏–∫–∏", "–¥–µ–ø—É—Ç–∞—Ç–∏", "—á–ª–µ–Ω–∏",
        "—Å–æ–ª–¥–∞—Ç–∏", "—à–∏–Ω—à–∏–ª–∏", "–ª—å–æ—Ç—á–∏–∫–∏", "—Å–Ω–∞–π–ø–µ—Ä–∏", "—Ç–∞–∫—Ç–∏–∫—É–ª—å—â–∏–∫–∏", "–≤—ñ—Å—Ç–∏",
        "—Ä–æ–∑–≤—ñ–¥–Ω–∏–∫–∏", "–∫–æ–º–∞–Ω–¥–∏—Ä–∏", "—Ä—è–¥–æ–≤—ñ", "—Å–µ—Ä–∂–∞–Ω—Ç–∏", "–æ—Ñ—ñ—Ü–µ—Ä–∏", "–≥–µ–Ω–µ—Ä–∞–ª–∏",
        "–ø—ñ—Ö–æ—Ç–∏–Ω—Ü—ñ", "–∞—Ä—Ç–∏–ª–µ—Ä–∏—Å—Ç–∏", "–∑–≤'—è–∑–∫—ñ–≤—Ü—ñ", "–≤–æ–¥—ñ—ó", "–º–µ—Ö–∞–Ω—ñ–∫–∏", "–∫—É–ª–µ–º–µ—Ç–Ω–∏–∫–∏",
        "—Å–æ–º–∞–ª—ñ–π—Ü—ñ", "–ø–ª–∏—Ç–æ–≤–∫–ª–∞–¥–∞—á—ñ", "–¥–∏–≤–µ—Ä—Å–∞–Ω—Ç–∏", "—à—Ç—É—Ä–º–æ–≤–∏–∫–∏", "–≥–∞—á—ñ–º–µ–Ω–∏", "–Ω–∞–ø–∞–¥–Ω–∏–∫–∏",
        "–±–æ–π–æ–≤–∏–∫–∏", "–Ω–æ–≤–æ–±—Ä–∞–Ω—Ü—ñ", "–¥–æ–±—Ä–æ–≤–æ–ª—å—Ü—ñ", "–∫–æ–Ω—Ç—Ä–∞–∫—Ç–Ω–∏–∫–∏", "–ø—Ä–∏–∑–æ–≤–Ω–∏–∫–∏", "—Ä–µ–∑–µ—Ä–≤—ñ—Å—Ç–∏",
        "–¥—é—à–µ—Å–∏", "–∫—Ä–æ–∫–æ–¥–∏–ª–∏", "—Ü–∏—Ü—å–∫–æ–¥–∞–≤–∏", "–ª–µ–≥—ñ–æ–Ω–µ—Ä–∏", "–≥–≤–∞—Ä–¥—ñ–π—Ü—ñ", "—Ä–µ–π–Ω–¥–∂–µ—Ä–∏",
        "—à–æ–∫–æ–ª–æ–¥–∫–∏ —á–∞–π–∫–∞", "—Å–∏—Ä–æ—ó–¥–∏", "–º–∏—Ä–æ—Ç–≤–æ—Ä—Ü—ñ", "–ø–∞—Ç—Ä—É–ª—å–Ω—ñ", "—Å–æ–±–∞—á–∞—Ç–Ω–∏–∫–∏", "–ø–æ–ª—Ç–∞–≤—Ü—ñ",
        "–≥—Ä–µ–Ω–∞–¥–µ—Ä–∏", "–∫–∞–≤–∞–ª–µ—Ä–∏—Å—Ç–∏", "–º–∞—Ö–Ω–æ–≤—Ü—ñ", "–∑—Ä–∞–¥–æ–π–±–∏", "—Ñ–∞–Ω–∏ —Ç–µ–ª–µ–º–∞—Ä–∞—Ñ–æ–Ω—É"
    ]
    
    # –û–±–∏—Ä–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤—ñ —Å–ª–æ–≤–∞
    random_adjective = random.choice(adjectives)
    random_noun = random.choice(nouns)
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–∞–∑–≤—É –∑–∞–≥–æ–Ω—É
    squad_name = f"**{random_adjective} {random_noun}**"
    
    # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –ø—É–±–ª—ñ—á–Ω–æ
    await interaction.response.send_message(
        f"ü¶ç –í–∏–ø–∞–¥–∫–æ–≤–∞ –Ω–∞–∑–≤–∞ Squad –∑–∞–≥–æ–Ω—É: {squad_name}",
        ephemeral=False
    )

@bot.tree.command(name="autotop", description="–ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–ø—É –≤ —Ü—å–æ–º—É –∫–∞–Ω–∞–ª—ñ")
@is_admin_user()
async def auto_top_command(interaction: discord.Interaction):
    await interaction.response.send_message("ü¶ç –ù–∞–ª–∞—à—Ç–æ–≤—É—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–ø—É, —Ü–µ –±—É–¥–µ –∫—Ä—É—Ç–æ...", ephemeral=True)
    
    try:
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∫–∞–Ω–∞–ª –¥–ª—è –∞–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω—å
        Settings.AUTO_UPDATE_CHANNEL_ID = interaction.channel.id
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        players_list = data_cache.get_current_month_data(with_steam_id=False)
        if players_list:
            embeds = create_leaderboard_embeds(players_list, is_admin=False, title_suffix=" ü¶ç")
            message = await interaction.channel.send(embed=embeds[0])
            bot.auto_update_message_id = message.id
            
            await interaction.edit_original_response(
                content=f"ü¶ç –°—É–ø–µ—Ä! –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–ø—É –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª—ñ {interaction.channel.mention}\n"
                        f"ü¶ç –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–¥–µ –æ–Ω–æ–≤–ª—é–≤–∞—Ç–∏—Å—å –∫–æ–∂–Ω—ñ 10 —Ö–≤–∏–ª–∏–Ω, —è–∫ –≥–æ–¥–∏–Ω–Ω–∏–∫!"
            )
        else:
            await interaction.edit_original_response(content="ü¶ç –û—É, –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –ø–æ–∫–∞–∑—É, —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫")
            
    except Exception as e:
        print(f"Error in autotop command: {e}")
        await interaction.edit_original_response(content="ü¶ç –û–π-–æ–π, —â–æ—Å—å –∑–ª–∞–º–∞–ª–æ—Å—å –ø—Ä–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—ñ –∞–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è")

@bot.tree.command(name="cachestatus", description="–ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å –∫–µ—à—É –¥–∞–Ω–∏—Ö")
@is_admin_user()
async def cache_status_command(interaction: discord.Interaction):
    status = data_cache.get_cache_status()
    next_update = "–•–∑ –∫–æ–ª–∏"
    
    if data_cache.last_update:
        import time
        time_since_update = datetime.now(timezone.utc) - data_cache.last_update
        time_until_next = 600 - time_since_update.total_seconds()  # 600 —Å–µ–∫ = 10 —Ö–≤
        if time_until_next > 0:
            next_update = f"{int(time_until_next / 60)} —Ö–≤ {int(time_until_next % 60)} —Å–µ–∫"
        else:
            next_update = "–ü—Ä—è–º–æ –∑–∞—Ä–∞–∑!"
    
    embed = discord.Embed(
        title="ü¶ç –°—Ç–∞—Ç—É—Å –∫–µ—à—É –¥–∞–Ω–∏—Ö",
        description=f"{status}\n\nü¶ç –ù–∞—Å—Ç—É–ø–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {next_update}",
        color=discord.Color.blue(),
        timestamp=datetime.now(timezone.utc)
    )
    
    await interaction.response.send_message(embed=embed, ephemeral=True)

def create_leaderboard_embeds(players_list, is_admin: bool = False, title_suffix: str = ""):
    """–°—Ç–≤–æ—Ä—é—î –æ–¥–∏–Ω embed –¥–ª—è –ª—ñ–¥–µ—Ä–±–æ—Ä–¥—É –∑ —É—Å—ñ–º–∞ –≥—Ä–∞–≤—Ü—è–º–∏"""
    if not players_list:
        return []
    
    # –û–±–º–µ–∂—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥—Ä–∞–≤—Ü—ñ–≤ —â–æ–± –ø–æ–º—ñ—Å—Ç–∏—Ç–∏—Å—å –≤ –æ–¥–∏–Ω embed
    max_players = 50 if is_admin else 80  # Steam ID –∑–∞–π–º–∞—î –±—ñ–ª—å—à–µ –º—ñ—Å—Ü—è
    display_players = players_list[:max_players]
    
    leaderboard_message = ""
    
    for i, player in enumerate(display_players):
        if is_admin:
            line = f"{i + 1}. **{player.steam_id}** **{player.name}**: {Tools.format_time(player.value)}"
        else:
            line = f"{i + 1}. **{player.name}**: {Tools.format_time(player.value)}"
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ –ø–µ—Ä–µ–≤–∏—â—É—î–º–æ –ª—ñ–º—ñ—Ç —Å–∏–º–≤–æ–ª—ñ–≤ Discord (4096)
        test_message = leaderboard_message + line + "\n"
        if len(test_message) > 4000:  # –ó–∞–ª–∏—à–∞—î–º–æ —Ç—Ä–æ—Ö–∏ –º—ñ—Å—Ü—è
            remaining_count = len(players_list) - i
            leaderboard_message += f"... —Ç–∞ —â–µ {remaining_count} –≥—Ä–∞–≤—Ü—ñ–≤"
            break
        
        leaderboard_message += line + "\n"
    
    embed = discord.Embed(
        title=f"Top 100 Online ‚Äî SQUAD UKRAINE{title_suffix}",
        description=leaderboard_message,
        color=discord.Color.blue(),
        timestamp=datetime.now(timezone.utc)
    )
    
    # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—Ö –≥—Ä–∞–≤—Ü—ñ–≤
    embed.add_field(
        name="ü¶ç –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", 
        value=f"–ü–æ–∫–∞–∑–∞–Ω–æ: {len(display_players)} –∑ {len(players_list)} –≥—Ä–∞–≤—Ü—ñ–≤", 
        inline=False
    )
    
    if data_cache.last_update:
        embed.set_footer(text=f"ü¶ç –û–Ω–æ–≤–ª–µ–Ω–æ: {data_cache.last_update.strftime('%H:%M:%S UTC')}")
    
    return [embed]

@tasks.loop(seconds=Settings.DATA_UPDATE_INTERVAL)
async def data_updater():
    """–§–æ–Ω–æ–≤–∞ –∑–∞–¥–∞—á–∞ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ–∂–Ω—ñ 10 —Ö–≤–∏–ª–∏–Ω"""
    try:
        print("ü¶ç Starting scheduled data update...")
        await data_cache.update_data()
    except Exception as e:
        print(f"Error in data updater: {e}")

@tasks.loop(minutes=10)
async def auto_update_top():
    """–§–æ–Ω–æ–≤–∞ –∑–∞–¥–∞—á–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–ø—É"""
    try:
        if not Settings.AUTO_UPDATE_CHANNEL_ID or not bot.auto_update_message_id:
            return
        
        channel = bot.get_channel(Settings.AUTO_UPDATE_CHANNEL_ID)
        if not channel:
            return
        
        message = await channel.fetch_message(bot.auto_update_message_id)
        if not message:
            return
        
        players_list = data_cache.get_current_month_data(with_steam_id=False)
        if players_list:
            embeds = create_leaderboard_embeds(players_list, is_admin=False, title_suffix=" ü¶ç")
            await message.edit(embed=embeds[0])
            print(f"ü¶ç Auto-updated top message in channel {channel.name}")
        
    except Exception as e:
        print(f"Error in auto update: {e}")

@data_updater.before_loop
async def before_data_updater():
    print("ü¶ç Waiting for bot to be ready before starting data updater...")
    await bot.wait_until_ready()

@auto_update_top.before_loop
async def before_auto_update():
    print("ü¶ç Waiting for bot to be ready before starting auto update...")
    await bot.wait_until_ready()

@bot.tree.error
async def on_app_command_error(interaction: discord.Interaction, error: app_commands.AppCommandError):
    if isinstance(error, app_commands.CheckFailure):
        await interaction.response.send_message(
            "ü¶ç –ï–π, —É —Ç–µ–±–µ –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏, —Ö–ª–æ–ø–µ—Ü—å!", 
            ephemeral=True
        )
    else:
        print(f"Command error: {error}")
        if not interaction.response.is_done():
            await interaction.response.send_message(
                "ü¶ç –û–π-–æ–π, —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ –∫–æ–º–∞–Ω–¥–∏!", 
                ephemeral=True
            )

async def main():
    token = os.getenv('TOKEN_BOT')
    if not token:
        print("ERROR: TOKEN_BOT –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞")
        return
    
    print("Starting bot...")
    print(f"Bot token present: {bool(token)}")
    print(f"BM token present: {bool(os.getenv('TOKEN_BM'))}")
    
    try:
        print("Creating bot instance...")
        # –°–ø–æ—á–∞—Ç–∫—É –∑–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞ –±–µ–∑ —Ñ–æ–Ω–æ–≤–∏—Ö –∑–∞–¥–∞—á
        await bot.start(token)
    except Exception as e:
        print(f"Failed to start bot: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main())
