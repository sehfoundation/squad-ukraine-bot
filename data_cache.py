import asyncio
from datetime import datetime, timezone
from typing import List, Optional
from parser import Parser, Player

class DataCache:
    def __init__(self):
        self.current_month_data: List[Player] = []
        self.previous_month_data: List[Player] = []
        self.last_update: Optional[datetime] = None
        self.is_updating = False
        
    async def update_data(self):
        """–û–Ω–æ–≤–ª—é—î –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ –∑ API"""
        if self.is_updating:
            print("Data update already in progress, skipping...")
            return
            
        self.is_updating = True
        print(f"Starting data update at {datetime.now(timezone.utc)}")
        
        try:
            parser = Parser()
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –º—ñ—Å—è—Ü—è
            print("Fetching current month data...")
            current_data = await parser.fetch_and_parse_leaderboard(is_admin=True, is_current_month=True)
            if current_data:
                self.current_month_data = current_data
                print(f"Updated current month data: {len(current_data)} players")
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –º—ñ—Å—è—Ü—è
            print("Fetching previous month data...")
            previous_data = await parser.fetch_and_parse_leaderboard(is_admin=True, is_current_month=False)
            if previous_data:
                self.previous_month_data = previous_data
                print(f"Updated previous month data: {len(previous_data)} players")
            
            self.last_update = datetime.now(timezone.utc)
            print(f"Data update completed at {self.last_update}")
            
        except Exception as e:
            print(f"Error during data update: {e}")
        finally:
            self.is_updating = False
    
    def get_current_month_data(self, with_steam_id: bool = False) -> List[Player]:
        """–ü–æ–≤–µ—Ä—Ç–∞—î –¥–∞–Ω—ñ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –º—ñ—Å—è—Ü—è"""
        if with_steam_id:
            return self.current_month_data
        else:
            # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ–ø—ñ—é –±–µ–∑ Steam ID –¥–ª—è –ø—É–±–ª—ñ—á–Ω–∏—Ö –∫–æ–º–∞–Ω–¥
            return [Player(p.name, p.id, p.value) for p in self.current_month_data]
    
    def get_previous_month_data(self) -> List[Player]:
        """–ü–æ–≤–µ—Ä—Ç–∞—î –¥–∞–Ω—ñ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –º—ñ—Å—è—Ü—è"""
        return self.previous_month_data
    
    def is_data_fresh(self, max_age_minutes: int = 15) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –¥–∞–Ω—ñ —Å–≤—ñ–∂—ñ"""
        if not self.last_update:
            return False
        
        age = datetime.now(timezone.utc) - self.last_update
        return age.total_seconds() < (max_age_minutes * 60)
    
    def get_cache_status(self) -> str:
        """–ü–æ–≤–µ—Ä—Ç–∞—î —Å—Ç–∞—Ç—É—Å –∫–µ—à—É"""
        if not self.last_update:
            return "ü¶ç –î–∞–Ω—ñ –Ω–µ —à–æ—Å—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ"
        
        age = datetime.now(timezone.utc) - self.last_update
        age_minutes = int(age.total_seconds() / 60)
        
        status = "ü¶ç –°–≤—ñ–∂—ñ" if self.is_data_fresh() else "ü¶ç –Ω–µ —Ç–∞–∫—ñ —É–∂ —ñ —Å–≤—ñ–∂—ñ"
        current_count = len(self.current_month_data)
        previous_count = len(self.previous_month_data)
        
        return f"{status} (–æ–Ω–æ–≤–ª–µ–Ω–æ {age_minutes} —Ö–≤ —Ç–æ–º—É)\nüìä –ü–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å: {current_count} –≥—Ä–∞–≤—Ü—ñ–≤\nüìä –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –º—ñ—Å—è—Ü—å: {previous_count} –≥—Ä–∞–≤—Ü—ñ–≤"

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –∫–µ—à—É
data_cache = DataCache()
